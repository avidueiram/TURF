/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viktor;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Alfredo
 */
public class ViktorFrame extends javax.swing.JFrame {

    private Connection conn;
    private Statement stmt;
    
    private long time;
    private int total;
    private int totalSession;
    private int timeRunning;
    private boolean isRunning;
    private int timeSleeping;
    
    private Calendar cal = Calendar.getInstance();
    
    /**
     * Creates new form ViktorFrame
     */
    public ViktorFrame() {
        initComponents();
        if(!connectDB())
        {
            JOptionPane.showMessageDialog(null, "Could not connect to database. Check LOG for more infomation.", "ERROR", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        
        this.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width / 2) - (this.getWidth() / 2),
                         (Toolkit.getDefaultToolkit().getScreenSize().height / 2) - (this.getHeight()/ 2));
        
        initLastSession();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTotalGamesCaptured = new javax.swing.JLabel();
        jLabelTotalGamesCapturedThisSession = new javax.swing.JLabel();
        jLabelTimeRunning = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jButtonStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Viktor");
        setResizable(false);

        jLabelTotalGamesCaptured.setText("Total games captured:");

        jLabelTotalGamesCapturedThisSession.setText("Total games captured this session:");

        jLabelTimeRunning.setText("Time running:");

        jLabelStatus.setText("Status:");

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTotalGamesCaptured)
                    .addComponent(jLabelTotalGamesCapturedThisSession)
                    .addComponent(jLabelTimeRunning)
                    .addComponent(jLabelStatus)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelTotalGamesCaptured)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTotalGamesCapturedThisSession)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTimeRunning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonStart)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        isRunning = true;
        new CaptureProcess().start();
        new TimeRunning().start();
        jButtonStart.setEnabled(false);
    }//GEN-LAST:event_jButtonStartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViktorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViktorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStart;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelTimeRunning;
    private javax.swing.JLabel jLabelTotalGamesCaptured;
    private javax.swing.JLabel jLabelTotalGamesCapturedThisSession;
    // End of variables declaration//GEN-END:variables

    private boolean connectDB()
    {
        try
        { 
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://" + GlobalDef.DEF_HOSTNAME + "/" + GlobalDef.DEF_DATABASE, GlobalDef.DEF_USERNAME, GlobalDef.DEF_PASSWORD);  
            stmt = conn.createStatement();
            return true;
        }
        catch (ClassNotFoundException | SQLException ex)
        {
            Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
            return false;
        }
    }    
    
    private void initLastSession()
    {
        try
        {
            ResultSet rs = stmt.executeQuery("SELECT count(*) as total, (SELECT timeExtract FROM tbl_match ORDER BY timeExtract DESC LIMIT 0, 1) as timeExtract FROM tbl_match");
            if(rs.next())
            {
                total = rs.getInt("total");  
                time = rs.getLong("timeExtract") + 300;                         
            }
            else
            {
                time = GlobalDef.DEF_START_TIME;
                total = 0;
            }
            totalSession = 0;
            updateLabels();
            updateStatus("Waiting...");
        }
        catch (SQLException ex)
        {
            Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateLabels()
    {        
        jLabelTotalGamesCaptured.setText("Total games captured: " + total);
        jLabelTotalGamesCapturedThisSession.setText("Total games captured this session: " + totalSession);
        jLabelTimeRunning.setText("Time running: " + (timeRunning / 60) + "m " + (timeRunning % 60) + "s");
    }
    
    private void updateStatus(String status)
    {
        jLabelStatus.setText("Status: " + status);
    }
    
    class CaptureProcess extends Thread
    {
        private ArrayList<String> decodeMatchIDs(String data)
        {
            ArrayList<String> matchIdList = new ArrayList<>();
            if(data.length() > 2)
            {
                data = data.substring(1, data.length());
                data = data.substring(0, data.length() - 1);
                System.out.println(time + " - " + data);
                while(data.contains(","))
                {
                    matchIdList.add(data.substring(0, data.indexOf(",")));
                    data = data.substring(data.indexOf(",") + 1);
                }  
                matchIdList.add(data);
            }
            return matchIdList;
        }
        
        @Override
        public void run()
        {
            updateStatus("Running...");
            while(isRunning)
            {
                try 
                {
                    cal.setTime(new Date(time * 1000));
                    updateStatus("Capturing finished games for " + cal.get(Calendar.DAY_OF_MONTH) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR) + " " + cal.get(Calendar.HOUR_OF_DAY) + ":" + cal.get(Calendar.MINUTE) + "...");
                    if(timeSleeping != 0)
                    {
                        timeSleeping--;
                        updateStatus("Sleeping for " + (timeSleeping / 60) + "m " + (timeSleeping % 60) + "s...");
                        Thread.sleep(1000);
                        continue;
                    }
                    try
                    {
                        URL url = new URL("https://na.api.pvp.net/api/lol/na/v4.1/game/ids?beginDate=" + time + "&api_key=" + GlobalDef.DEF_API_KEY);
                        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));

                        ArrayList<String> matchIdList = decodeMatchIDs(br.readLine());
                        
                        for(String matchId : matchIdList)
                        {
                            try
                            {
                                stmt.executeUpdate("INSERT INTO tbl_match(id, timeExtract) VALUES (" + matchId + ", " + time + ")");
                                total++;
                                totalSession++;
                            }
                            catch(SQLException ex)
                            {
                                //Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
                                System.out.println("Duplicated key " + matchId + " - Ignored...");
                            }
                        }
                        updateLabels();
                        time += 300;
                        Thread.sleep(1500);
                    }
                    catch(MalformedURLException ex)
                    {
                        Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    catch (IOException ex)
                    {
                        Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
                        timeSleeping = 5 * 60;                        
                    }                    
                } 
                catch (InterruptedException ex)
                {
                    Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }  
    }
    
    class TimeRunning extends Thread
    {
        @Override
        public void run()
        {
            while(isRunning)
            {
                try {
                    timeRunning++;
                    updateLabels();
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(ViktorFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }         
    }
}
